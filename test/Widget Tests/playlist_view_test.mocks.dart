// Mocks generated by Mockito 5.4.4 from annotations
// in shuffler/test/Widget%20Tests/playlist_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter/material.dart' as _i5;
import 'package:logging/logging.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:oauth2/oauth2.dart' as _i2;
import 'package:shuffler/api_utils.dart' as _i6;
import 'package:shuffler/components/playlist.dart' as _i4;
import 'package:shuffler/components/track.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_1 extends _i1.SmartFake implements _i3.Logger {
  _FakeLogger_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlaylist_2 extends _i1.SmartFake implements _i4.Playlist {
  _FakePlaylist_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_3 extends _i1.SmartFake implements _i5.Widget {
  _FakeWidget_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [APIUtils].
///
/// See the documentation for Mockito's code generation for more information.
class MockAPIUtils extends _i1.Mock implements _i6.APIUtils {
  MockAPIUtils() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  _i3.Logger get lg => (super.noSuchMethod(
        Invocation.getter(#lg),
        returnValue: _FakeLogger_1(
          this,
          Invocation.getter(#lg),
        ),
      ) as _i3.Logger);

  @override
  _i7.Future<_i4.Playlist> getPlaylist(String? playlistID) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlaylist,
          [playlistID],
        ),
        returnValue: _i7.Future<_i4.Playlist>.value(_FakePlaylist_2(
          this,
          Invocation.method(
            #getPlaylist,
            [playlistID],
          ),
        )),
      ) as _i7.Future<_i4.Playlist>);

  @override
  _i7.Future<List<_i8.Track>> getTracksForPlaylist(_i4.Playlist? playlist) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTracksForPlaylist,
          [playlist],
        ),
        returnValue: _i7.Future<List<_i8.Track>>.value(<_i8.Track>[]),
      ) as _i7.Future<List<_i8.Track>>);

  @override
  _i7.Future<void> addTrackToQueue(_i8.Track? track) => (super.noSuchMethod(
        Invocation.method(
          #addTrackToQueue,
          [track],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i5.Widget getImage(String? url) => (super.noSuchMethod(
        Invocation.method(
          #getImage,
          [url],
        ),
        returnValue: _FakeWidget_3(
          this,
          Invocation.method(
            #getImage,
            [url],
          ),
        ),
      ) as _i5.Widget);
}
